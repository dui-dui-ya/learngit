<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.baizhi.chenly.dao.BookDao">
	<sql id="QUERY">
		select book_id as bookId, book_name as bookName,series_name as seriesName,book_author as bookAuthor,book_publish as bookPublish,
			publish_time as publishTime,revision as revision,word_count as wordCount,
			page_count as pageCount,open_type as openType,book_paper as bookPaper,book_wrapper as bookWrapper,
			
			book_price as bookPrice,book_dprice as bookDprice,
			product_image_path as productImagePath,printing_time as printingTime,impression as impression,
			book_isbn as bookIsbn,editor_recommendation as editorRecommendation,content_introduction as contentIntroduction,
			author_introduction as authorIntroduction,menu as menu,media_review as mediaReview,
			digest_image_path as digestImagePath,customer_socre as customerSocre
			
	</sql>
	<select id="selectEditorRecom" resultType="Book">
		select book_id as bookId, book_name as bookName,product_image_path as productImagePath,
			book_author as bookAuthor,book_publish as bookPublish,publish_time as publishTime,
			content_Introduction as contentIntroduction,
			book_price as bookPrice,book_dprice as bookDprice
		from d_book
		where editor_recommendation is not null
	</select>
	<select id="selectBySales" resultType="Book">
		select *
		from (<include refid="QUERY"/>
			from d_book
			where sales is not null
			order by sales desc)
		where rownum &lt;=8
	</select>
	<select id="selectByShelvesTime" resultType="Book">
		select *
		from (<include refid="QUERY"/>
			from d_book
			where shelves_date is not null
			order by shelves_date desc)
		where rownum &lt;=8
	</select>
	<select id="selectByShTimeAndSales" resultType="Book">
		select * from
			(<include refid="QUERY"/>
			from d_book
			where sales is not null and shelves_date is not null
			order by sales desc,shelves_date desc)
		where rownum &lt;=8
	</select>
	<!-- 根据图书id查询图书 -->
	<select id="selectByBookId" resultType="Book">
		<include refid="QUERY"/>
		from d_book
		where book_id=#{bookId}
	</select>
	<!-- 根据图书分类id进行查询 -->
	<!-- <select id="selectByCateId" resultType="Book">
		<include refid="QUERY"/>
		from d_book
		where book_category=#{cateId}
	</select> -->
</mapper>
<!-- <mapper namespace="com.baizhi.dao.EmpDao">
	<resultMap type="Emp" id="empMap">
		<id column="emp_id" property="eid" />
		<result column="emp_name" property="ename" />
		<result column="emp_salary" property="salary" />
		<result column="emp_age" property="age" />
		<association property="dept" javaType="Dept">
			<id column="dept_id" property="did" />
			<result column="dept_name" property="dname" />
		</association>
	</resultMap>
	动态sql
	sql片段
	<sql id="QUERY">
		select e.emp_id as emp_id,e.emp_name as
		emp_name,e.emp_salary as emp_salary,e.emp_age as emp_age,
		d.dept_id as
		dept_id,d.dept_name as dept_name
		from emp1 e left join dept d on
		e.dept_id=d.dept_id
	</sql>
	<select id="selectAllEmp" resultMap="empMap">
		<include refid="QUERY" />
		<trim prefix="where" prefixOverrides="and">
			<if test="name!=null">
				<if test="edname=='ename'">根据员工名字模糊查询
					e.emp_name like '%'||#{name}||'%'
				</if>
				<if test="edname=='dname'">g根据部门名称模糊查询
					and d.dept_name like '%'||#{name}||'%'
				</if>
			</if>
			<if test="salary!=null">
				<if test="greatOrLess==0">数据>salary
					and e.emp_salary &gt; #{salary}
				</if>
				<if test="greatOrLess==1">数据<salary
					and e.emp_salary &lt; #{salary}
				</if>
			</if>
		</trim>
		select e.emp_id as emp_id,e.emp_name as emp_name,e.emp_salary as emp_salary,e.emp_age 
			as emp_age, d.dept_id as dept_id,d.dept_name as dept_name from emp1 e left 
			join dept d on e.dept_id=d.dept_id

		select ip.p_id as pid,ip.name as pname,ip.sex as psex,ip.mobile as 
			pmobile, ic.card_id as cid,ic.street as cstreet from id_person ip left join 
			id_card ic on ip.card_id=ic.card_id where p_id=#{id}
	</select>
	<select id="selectByEid" resultMap="empMap">
		select e.emp_id as emp_id,e.emp_name as emp_name,e.emp_salary as emp_salary,e.emp_age 
			as emp_age, d.dept_id as dept_id,d.dept_name as dept_name from emp1 e left 
			join dept d on e.dept_id=d.dept_id
		<include refid="QUERY" />
		where e.emp_id=#{eid}
	</select>
	<insert id="insertEmp">
		insert into dept values(#{did},#{dname})
		insert into emp1
		values(emp1_seq.nextval,#{ename},#{salary},#{age},#{dept.did})
	</insert>
	<update id="updateEmp">
		update dept set dept_id=#{did},dept_name=#{dname} where dept_id=#{did}
		update emp1 set
		<trim prefix="set" suffixOverrides=",">
			<if test="ename!=null">emp_name=#{ename},</if>
			<if test="salary!=null">emp_salary=#{salary},</if>
			<if test="age!=null">emp_age=#{age},</if>
			<if test="did!=null">edept_did=#{did},</if>
		</trim>
		emp_name=#{ename},emp_salary=#{salary},emp_age=#{age},dept_id=#{dept.did}
		where emp_id=#{eid}
	</update>
	<delete id="deleteEmp">
		delete from emp1 where emp_id=#{eid}
	</delete>
</mapper> -->
