<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.baizhi.chenly.dao.CategoryDao">
	<resultMap type="Category" id="cateMap">
		<id column="cateId" property="cateId"/>
		<result column="cateName" property="cateName"/>
		<collection property="children" ofType="Category">
			<id column="pcateId" property="cateId"/>
			<result column="pcateName" property="cateName"/>
			<result column="bookCount" property="bookCount"/>
		</collection>
	</resultMap>
	<!-- <resultMap type="Book" id=""></resultMap> -->
	<select id="selectAllCate" resultMap="cateMap">
		select c.category_id as cateId,c.category_name as cateName,p.category_id as pcateId,
			p.category_name as pcateName,p.book_counts as bookCount<!-- ,p.category_pid as catePid -->
		from d_category c left join d_category p
		on c.category_id=p.category_pid
		<!-- 动态sql语句 -->
		<trim prefix="where">
			<if test="cateId!=null"><!-- 判断参数是否为空，若为空则查询所有类别，不为空进入下一层判断 -->
				c.category_id=#{cateId} or 
				c.category_id=(select category_pid
						from d_category
						where category_id = #{cateId})
				
				<!-- where c.category_id=
				(select category_pid as catePid
				from d_category
				where category_id=011); -->
				<!-- <if test="(select category_pid
					from d_category
					where category_id=#{cateId})=='null'">如果父类别为空，证明是一级类别 
					c.category_id = #{cateId}		
				</if>
				<if test="(select category_pid
					from d_category
					where category_id=#{cateId})!='null'">如果父类别不为空，证明是二级类别 
					c.category_id =(select category_pid
						from d_category
						where category_id=#{cateId})
				</if> -->
			</if>
		</trim>
	</select>
	<resultMap type="CateGory" id="cateIdMap">
		<id column="cateId" property="cateId"/>
		<result column="cateName" property="cateName"/>
		<result column="bookCount" property="bookCount"/>
		<collection property="books" ofType="Book">
			<id column="bookId" property="bookId"/>
			<result column="bookName" property="bookName"/>
			<result column="productImagePath" property="productImagePath"/>
			<result column="customerSocre" property="customerSocre"/>
			<result column="bookAuthor" property="bookAuthor"/>
			<result column="bookPublish" property="bookPublish"/>
			<result column="publishTime" property="publishTime"/>
			<result column="mediaReview" property="mediaReview"/>
			<result column="bookPrice" property="bookPrice"/>
			<result column="bookDprice" property="bookDprice"/>
		</collection>
	</resultMap>
	<select id="selectBookByCateId" resultMap="cateIdMap">
		select c.category_id as cateId,c.category_name as cateName,p.category_id as pcateId,
			p.book_counts as bookCount,
			d.book_id as bookId,d.book_Name as bookName,d.product_image_path as productImagePath, d.customer_socre as customerSocre,d.book_author as bookAuthor,
			d.book_publish as bookPublish,d.publish_Time as publishTime,d.media_Review as mediaReview,
			d.book_price as bookPrice,d.book_Dprice as bookDprice
		from d_category c left join d_category p
		on c.category_id=p.category_pid
		left join d_book d
		on p.category_id = d.book_category
		where d.book_Name is not null and c.category_id=#{cateId}  or p.category_id =#{cateId}
		<trim prefix="order by">
			<!-- 1 :降序 -->
			<!-- 0  ：升序 -->
			<if test="shengOrJiang==1">
				d.shelves_date desc
			</if>
			<if test="shengOrJiang==0">
				d.shelves_date asc
			</if>
		</trim>
	</select>
	<!-- 查询类别下的图书数量 -->
	<select id="selectBookCount" resultType="Integer">
		select count(*)from
		(select c.category_id as cateId,c.category_name as cateName,p.category_id as pcateId,
			p.book_counts as bookCount,
			d.book_id as bookId,d.book_Name as bookName,d.customer_socre as customerSocre,d.book_author as bookAuthor,
			d.book_publish as bookPublish,d.publish_Time as publishTime,d.media_Review as mediaReview,
			d.book_price as bookPrice,d.book_Dprice as bookDpric
		 
		from d_category c left join d_category p
		on c.category_id=p.category_pid
		left join d_book d
		on p.category_id = d.book_category
		where d.book_Name is not null and c.category_id=#{cateId}  or p.category_id =#{cateId})
		where bookName is not null
	</select>
</mapper>
<!-- <mapper namespace="com.baizhi.dao.EmpDao">
	<resultMap type="Emp" id="empMap">
		<id column="emp_id" property="eid" />
		<result column="emp_name" property="ename" />
		<result column="emp_salary" property="salary" />
		<result column="emp_age" property="age" />
		<association property="dept" javaType="Dept">
			<id column="dept_id" property="did" />
			<result column="dept_name" property="dname" />
		</association>
	</resultMap>
	动态sql
	sql片段
	<sql id="QUERY">
		select e.emp_id as emp_id,e.emp_name as
		emp_name,e.emp_salary as emp_salary,e.emp_age as emp_age,
		d.dept_id as
		dept_id,d.dept_name as dept_name
		from emp1 e left join dept d on
		e.dept_id=d.dept_id
	</sql>
	<select id="selectAllEmp" resultMap="empMap">
		<include refid="QUERY" />
		<trim prefix="where" prefixOverrides="and">
			<if test="name!=null">
				<if test="edname=='ename'">根据员工名字模糊查询
					e.emp_name like '%'||#{name}||'%'
				</if>
				<if test="edname=='dname'">g根据部门名称模糊查询
					and d.dept_name like '%'||#{name}||'%'
				</if>
			</if>
			<if test="salary!=null">
				<if test="greatOrLess==0">数据>salary
					and e.emp_salary &gt; #{salary}
				</if>
				<if test="greatOrLess==1">数据<salary
					and e.emp_salary &lt; #{salary}
				</if>
			</if>
		</trim>
		select e.emp_id as emp_id,e.emp_name as emp_name,e.emp_salary as emp_salary,e.emp_age 
			as emp_age, d.dept_id as dept_id,d.dept_name as dept_name from emp1 e left 
			join dept d on e.dept_id=d.dept_id

		select ip.p_id as pid,ip.name as pname,ip.sex as psex,ip.mobile as 
			pmobile, ic.card_id as cid,ic.street as cstreet from id_person ip left join 
			id_card ic on ip.card_id=ic.card_id where p_id=#{id}
	</select>
	<select id="selectByEid" resultMap="empMap">
		select e.emp_id as emp_id,e.emp_name as emp_name,e.emp_salary as emp_salary,e.emp_age 
			as emp_age, d.dept_id as dept_id,d.dept_name as dept_name from emp1 e left 
			join dept d on e.dept_id=d.dept_id
		<include refid="QUERY" />
		where e.emp_id=#{eid}
	</select>
	<insert id="insertEmp">
		insert into dept values(#{did},#{dname})
		insert into emp1
		values(emp1_seq.nextval,#{ename},#{salary},#{age},#{dept.did})
	</insert>
	<update id="updateEmp">
		update dept set dept_id=#{did},dept_name=#{dname} where dept_id=#{did}
		update emp1 set
		<trim prefix="set" suffixOverrides=",">
			<if test="ename!=null">emp_name=#{ename},</if>
			<if test="salary!=null">emp_salary=#{salary},</if>
			<if test="age!=null">emp_age=#{age},</if>
			<if test="did!=null">edept_did=#{did},</if>
		</trim>
		emp_name=#{ename},emp_salary=#{salary},emp_age=#{age},dept_id=#{dept.did}
		where emp_id=#{eid}
	</update>
	<delete id="deleteEmp">
		delete from emp1 where emp_id=#{eid}
	</delete>
</mapper> -->
